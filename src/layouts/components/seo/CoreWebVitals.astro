---
import parseTomlToJson from "@/lib/utils/parseTomlToJson";

const config = parseTomlToJson("./src/config/config.toml");
const enableWebVitals = config.analytics?.enable_web_vitals !== false;
---

{enableWebVitals && (
  <Fragment>
    <!-- Core Web Vitals Monitoring -->
    <script is:inline>
      // Web Vitals tracking for SEO performance monitoring
      function getCLS(onPerfEntry) {
        let clsValue = 0;
        let clsEntries = [];
        let cls;

        const entryHandler = (entry) => {
          if (!entry.hadRecentInput) {
            const firstSessionEntry = clsEntries[0];
            const lastSessionEntry = clsEntries[clsEntries.length - 1];
            
            if (clsValue && entry.startTime - lastSessionEntry.startTime < 1000 && 
                entry.startTime - firstSessionEntry.startTime < 5000) {
              clsValue += entry.value;
              clsEntries.push(entry);
            } else {
              clsValue = entry.value;
              clsEntries = [entry];
            }
            
            if (clsValue > cls?.value) {
              cls = { value: clsValue, entries: clsEntries };
              onPerfEntry(cls);
            }
          }
        };

        const po = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            entryHandler(entry);
          }
        });
        
        po.observe({ type: 'layout-shift', buffered: true });
      }

      function getFID(onPerfEntry) {
        const po = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.name === 'first-input-delay') {
              onPerfEntry(entry);
              po.disconnect();
            }
          }
        });
        
        po.observe({ type: 'first-input', buffered: true });
      }

      function getLCP(onPerfEntry) {
        const po = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];
          onPerfEntry(lastEntry);
        });
        
        po.observe({ type: 'largest-contentful-paint', buffered: true });
      }

      function getFCP(onPerfEntry) {
        const po = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.name === 'first-contentful-paint') {
              onPerfEntry(entry);
              po.disconnect();
            }
          }
        });
        
        po.observe({ type: 'paint', buffered: true });
      }

      function getTTFB(onPerfEntry) {
        const po = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            onPerfEntry(entry);
          }
        });
        
        po.observe({ type: 'navigation', buffered: true });
      }

      // Send metrics to analytics
      function sendToAnalytics(metric) {
        const body = JSON.stringify(metric);
        
        // Send to Google Analytics if available
        if (typeof gtag !== 'undefined') {
          gtag('event', metric.name, {
            event_category: 'Web Vitals',
            event_label: metric.id,
            value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
            non_interaction: true,
            custom_map: { metric_value: 'value' }
          });
        }

        // Send to custom endpoint for detailed analysis
        if ('navigator' in window && 'sendBeacon' in navigator) {
          navigator.sendBeacon('/api/analytics/web-vitals', body);
        }
      }

      // Initialize Core Web Vitals tracking
      document.addEventListener('DOMContentLoaded', function() {
        getCLS(sendToAnalytics);
        getFID(sendToAnalytics);
        getLCP(sendToAnalytics);
        getFCP(sendToAnalytics);
        getTTFB(sendToAnalytics);
      });

      // Real User Monitoring for SEO insights
      window.addEventListener('load', function() {
        const perfData = performance.timing;
        const networkData = performance.getEntriesByType('navigation')[0];
        
        const metrics = {
          // Page Load Times
          dns: perfData.domainLookupEnd - perfData.domainLookupStart,
          tcp: perfData.connectEnd - perfData.connectStart,
          request: perfData.responseStart - perfData.requestStart,
          response: perfData.responseEnd - perfData.responseStart,
          dom: perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart,
          
          // Network Quality
          downlink: navigator.connection?.downlink,
          effectiveType: navigator.connection?.effectiveType,
          rtt: navigator.connection?.rtt,
          
          // Page Info
          url: window.location.href,
          userAgent: navigator.userAgent,
          timestamp: Date.now()
        };

        // Send RUM data for SEO analysis
        if (typeof gtag !== 'undefined') {
          gtag('event', 'page_timing', {
            event_category: 'SEO Performance',
            dns_time: metrics.dns,
            tcp_time: metrics.tcp,
            response_time: metrics.response,
            dom_time: metrics.dom
          });
        }
      });
    </script>

    <!-- Preload critical resources for better Core Web Vitals -->
    <link rel="preload" href="/images/logo-nubesti.svg" as="image" type="image/svg+xml">
    <link rel="preload" href="/fonts/Satoshi-Regular.woff2" as="font" type="font/woff2" crossorigin>
    <link rel="preload" href="/fonts/Satoshi-Medium.woff2" as="font" type="font/woff2" crossorigin>
    
    <!-- Critical CSS preload -->
    <link rel="preload" href="/_astro/main.css" as="style">
    
    <!-- DNS prefetch for external resources -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    <link rel="dns-prefetch" href="//www.google-analytics.com">
    <link rel="dns-prefetch" href="//www.googletagmanager.com">
    
    <!-- Resource hints for improved loading -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  </Fragment>
)}
